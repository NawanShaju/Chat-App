{"ast":null,"code":"var _jsxFileName = \"/Users/nawanshaju/Documents/Course/ChatApp/chat-frontend/src/components/ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport styles from \"../ChatRoom.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nfunction ChatRoom() {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const username = \"User\" + Math.floor(Math.random() * 1000); // This can be replaced with actual logged-in user data.\n\n  // Fetch chat history when the component mounts or roomId changes\n  useEffect(() => {\n    // Join the room\n    socket.emit(\"joinRoom\", {\n      username,\n      room: roomId\n    });\n\n    // Fetch the chat history for the room\n    axios.get(`http://localhost:5001/api/chat/rooms/${roomId}/messages`).then(res => {\n      setMessages(res.data); // Set the chat history to the state\n    }).catch(error => {\n      console.error(\"Error fetching messages:\", error);\n    });\n\n    // Listen for new messages from the server\n    socket.on(\"message\", msg => {\n      setMessages(prevMessages => [...prevMessages, msg]); // Append new message to the history\n      alert(`New message from ${msg.sender}: ${msg.content}`); // Simple notification\n    });\n\n    // Clean up the socket connection when leaving the room\n    return () => {\n      socket.emit(\"leaveRoom\", {\n        room: roomId\n      });\n      socket.off(); // Remove any socket listeners\n    };\n  }, [roomId]);\n  const sendMessage = () => {\n    if (!message) return; // Don't send empty messages\n    socket.emit(\"sendMessage\", {\n      room: roomId,\n      sender: username,\n      content: message\n    }); // Emit the message to the server\n    setMessage(\"\"); // Clear the input after sending the message\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.messages,\n      id: \"messages\",\n      children: messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.message,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No messages yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this) // If no messages exist yet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatRoom, \"Fl1JYp4bfn2fzPmKvslzLTHaokI=\", false, function () {\n  return [useParams];\n});\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","useParams","io","axios","styles","jsxDEV","_jsxDEV","socket","ChatRoom","_s","roomId","messages","setMessages","message","setMessage","username","Math","floor","random","emit","room","get","then","res","data","catch","error","console","on","msg","prevMessages","alert","sender","content","off","sendMessage","className","chatContainer","children","id","length","map","index","fileName","_jsxFileName","lineNumber","columnNumber","inputContainer","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nawanshaju/Documents/Course/ChatApp/chat-frontend/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport styles from \"../ChatRoom.module.css\";\n\nconst socket = io(\"http://localhost:5000\");\n\nfunction ChatRoom() {\n  const { roomId } = useParams();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const username = \"User\" + Math.floor(Math.random() * 1000);  // This can be replaced with actual logged-in user data.\n\n  // Fetch chat history when the component mounts or roomId changes\n  useEffect(() => {\n    // Join the room\n    socket.emit(\"joinRoom\", { username, room: roomId });\n\n    // Fetch the chat history for the room\n    axios.get(`http://localhost:5001/api/chat/rooms/${roomId}/messages`)\n      .then((res) => {\n        setMessages(res.data);  // Set the chat history to the state\n      })\n      .catch((error) => {\n        console.error(\"Error fetching messages:\", error);\n      });\n\n    // Listen for new messages from the server\n    socket.on(\"message\", (msg) => {\n      setMessages((prevMessages) => [...prevMessages, msg]);  // Append new message to the history\n      alert(`New message from ${msg.sender}: ${msg.content}`);  // Simple notification\n    });\n\n    // Clean up the socket connection when leaving the room\n    return () => {\n      socket.emit(\"leaveRoom\", { room: roomId });\n      socket.off();  // Remove any socket listeners\n    };\n  }, [roomId]);\n\n  const sendMessage = () => {\n    if (!message) return;  // Don't send empty messages\n    socket.emit(\"sendMessage\", { room: roomId, sender: username, content: message });  // Emit the message to the server\n    setMessage(\"\");  // Clear the input after sending the message\n  };\n\n  return (\n    <div className={styles.chatContainer}>\n      <div className={styles.messages} id=\"messages\">\n        {/* Displaying all chat messages */}\n        {messages.length > 0 ? (\n          messages.map((msg, index) => (\n            <div key={index} className={styles.message}>\n              <strong>{msg.sender}:</strong> {msg.content}\n            </div>\n          ))\n        ) : (\n          <p>No messages yet</p>  // If no messages exist yet\n        )}\n      </div>\n\n      <div className={styles.inputContainer}>\n        <input\n          type=\"text\"\n          placeholder=\"Type a message\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ChatRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}